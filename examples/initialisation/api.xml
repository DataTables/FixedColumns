<?xml version="1.0" encoding="UTF-8" ?>
<dt-example table-type="html-wide" table-class="stripe row-border order-column nowrap" order="3">

<css lib="datatables fixedcolumns">
	#click-output {
		margin-bottom: 1em;
		padding: 1em;
		background-color: #f6f6f6;
		border: 1px solid #999;
		border-radius: 3px;
		height: 100px;
		overflow: auto;
	}
</css>
<js lib="jquery datatables fixedcolumns">
<![CDATA[
$(document).ready(function() {
	var table = $('#example').DataTable( {
		scrollY:        300,
		scrollX:        true,
		scrollCollapse: true,
		paging:         false,
		fixedColumns:   true
	} );

	$('button#increaseLeft').on('click', function() {
		var currLeft = table.fixedColumns().left();
        if(currLeft < 9) {
            table.fixedColumns().left(currLeft + 1);
            $('#click-output').prepend(
                '<div>New Left: '+(+currLeft+1)+'</div>'
            );
        }
	})

	$('button#decreaseLeft').on('click', function() {
		var currLeft = table.fixedColumns().left();
        if(currLeft > 0) {
            table.fixedColumns().left(currLeft - 1);
            $('#click-output').prepend(
                '<div>New Left: '+(+currLeft-1)+'</div>'
            );
        }
	})

	$('button#increaseRight').on('click', function() {
		var currRight = table.fixedColumns().right();
        if(currRight < 9) {
            table.fixedColumns().right(currRight + 1);
            $('#click-output').prepend(
                '<div>New Right: '+(+currRight+1)+'</div>'
            );
        }
	})

	$('button#decreaseRight').on('click', function() {
		var currRight = table.fixedColumns().right();
        if(currLeft > 0) {
            table.fixedColumns().right(currRight - 1);
            $('#click-output').prepend(
                '<div>New Right: '+(+currRight-1)+'</div>'
            );
        }
	})
} );
]]>
</js>

<title lib="FixedColumns">DataTables API</title>

<info><![CDATA[

This example shows a possible use of the API methods that were introduced in version 4.0.0. They are:

* `-api fixedColumns().left()` - Getter/Setter for the number of left FixedColumns
* `-api fixedColumns().right()` - Getter/Setter for the number of right FixedColumns

In this example there are 4 buttons to inrease/decrease the number of left/right columns. They do this by getting the current number of fixed columns, then making another call to increase or decrease that value. See the code below the table.

<button id="increaseLeft">Increase Number of Fixed Left Columns</button><br>
<button id="decreaseLeft">Decrease Number of Fixed Left Columns</button><br>
<button id="increaseRight">Increase Number of Fixed Right Columns</button><br>
<button id="decreaseRight">Decrease Number of Fixed Right Columns</button><br>

]]></info>

<demo-html>
	<div id="click-output">Number of FixedColumns - new values added at the top</div>
</demo-html>

</dt-example>
