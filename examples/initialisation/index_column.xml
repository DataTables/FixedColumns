<?xml version="1.0" encoding="UTF-8" ?>
<dt-example table-type="html-wide-index" table-class="stripe row-border order-column" order="12">

<css lib="datatables fixedcolumns">
	/* Ensure that the demo table scrolls */
	th, td { white-space: nowrap; }
	div.dataTables_wrapper {
		width: 800px;
		margin: 0 auto;
	}

	/* Styling for the index columns */
	td.dtfc-fixed-start {
		background-color: rgb(255, 243, 207) !important;
		border-right: 1px solid rgba(0, 0, 0, 0.5);
	}
</css>
<js lib="jquery datatables fixedcolumns">
<![CDATA[

var table = $('#example').DataTable({
	columnDefs: [
		{
			sortable: false,
			targets: 0
		}
	],
	fixedColumns: true,
	order: [[1, 'asc']],
	paging: false,
	scrollCollapse: true,
	scrollX: true,
	scrollY: 300
});

table
	.on('order.dt search.dt', function () {
		table
			.column(0, { search: 'applied', order: 'applied' })
			.nodes()
			.each(function (cell, i) {
				cell.innerHTML = i + 1;
			});
	})
	.draw();

]]>
</js>

<js-vanilla>
<![CDATA[

let table = new DataTable('#example', {
	columnDefs: [
		{
			sortable: false,
			targets: 0
		}
	],
	fixedColumns: true,
	order: [[1, 'asc']],
	paging: false,
	scrollCollapse: true,
	scrollX: true,
	scrollY: 300
});

table
	.on('order.dt search.dt', function () {
		table
			.column(0, { search: 'applied', order: 'applied' })
			.nodes()
			.each(function (cell, i) {
				cell.innerHTML = i + 1;
			});
	})
	.draw();
]]>
</js-vanilla>

<title lib="FixedColumns">Index column</title>

<info><![CDATA[

A typical interaction to want to perform with a fixed column, is an index column. A method for how this can be achieved with FixedColumns is shown in this example, building on the [index column](http://datatables.net/examples/api/counter_column) example for DataTables. Also shown in this example is how the fixed column can be styled with CSS to show it more prominently.

]]></info>

</dt-example>
