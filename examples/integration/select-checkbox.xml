<?xml version="1.0" encoding="UTF-8" ?>
<dt-example table-type="html-wide-index" table-class="stripe row-border order-column nowrap" order="2">

<css lib="datatables fixedcolumns select"/>
<js lib="jquery datatables fixedcolumns select">
<![CDATA[
$('#example').DataTable({
	columnDefs: [
		{
			orderable: false,
			className: 'select-checkbox',
			targets: 0
		}
	],
	fixedColumns: {
		start: 2
	},
	order: [[1, 'asc']],
	paging: false,
	scrollCollapse: true,
	scrollX: true,
	scrollY: 300,
	select: {
		style: 'os',
		selector: 'td:first-child'
	}
});

]]>
</js>

<js-vanilla>
<![CDATA[
new DataTable('#example', {
	columnDefs: [
		{
			orderable: false,
			render: DataTable.render.select(),
			targets: 0
		}
	],
	fixedColumns: {
		start: 2
	},
	order: [[1, 'asc']],
	paging: false,
	scrollCollapse: true,
	scrollX: true,
	scrollY: 300,
	select: {
		style: 'os',
		selector: 'td:first-child'
	}
});

]]>
</js-vanilla>

<title lib="FixedColumns">Select - checkboxes</title>

<info><![CDATA[

The [Select extension](//datatables.net/extensions/select) for DataTables has the ability to show a checkbox column to allow row selection and this is a natural fit for FixedColumns where you can have the checkbox column fixed and easily accessible.

The [Select extension's documentation](//datatables.net/extensions/select/examples/checkbox/) describes the checkbox selection options in detail, but please note that support is automatic for FixedColumns. No additional configuration is required in order to be able use both together.

]]></info>

</dt-example>
